plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'io.freefair.lombok' version '8.4'
	id 'com.avast.gradle.docker-compose' version '0.17.6'
	id 'com.gorylenko.gradle-git-properties' version '2.4.1'
}

group = 'com.hainenber.spreading'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

// Use Maven Central (https://mvnrepository.com/repos/central) to fetch dependencies
repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.kafka:spring-kafka'

	implementation 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.wiremock:wiremock-standalone:3.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Containerise the application
tasks.register('build-image') {
	description = 'Builds a Docker image for the Spring Boot application'
	group = 'docker'

	dependsOn tasks.build

	commandLine(
			'docker', 'build', '-t',
			"hainenber/${rootProject.name}:latest",
			'--build-arg',
			"JAR_PATH=${rootProject.name}-${version}.jar",
			'.'
	)
}

// Include Git info into build artifacts
springBoot {
	buildInfo()
}

// Require running 'docker-compose up'
// to set up deps (Kafka) before testing
dockerCompose {
	useComposeFiles = ['docker-compose.test.yml']

	devRun {
		useComposeFiles = ['docker-compose.yml']
	}
}

// Running prerequisite commands before running `bootRun`
tasks.register("run") {
	def pgTestdataDirIsEmpty = file('testdata/postgres').list().size() == 0
	dependsOn devRunComposeDown, devRunComposeUp
	doLast {
		if (pgTestdataDirIsEmpty) {
			exec {
				commandLine 'flyway', '-configFiles=flyway.admin.conf', 'migrate'
			}
			exec {
				commandLine 'flyway', '-configFiles=flyway.user.conf', 'migrate'
			}
		}
	}
	run.finalizedBy bootRun
}
